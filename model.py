"""Personal finance random website.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T9EzAwvejrPyKuUM0DZSiDngT-4WcX5f
"""



import pandas as pd
import seaborn as sb
import numpy as np
import pickle

from flask import Flask, render_template, request
import os
import subprocess

# Run the Flask app
subprocess.Popen(['python', 'app.py'])

# Open the Flask app in the default web browser
import webbrowser
webbrowser.open('http://localhost:5000')
df = pd.read_csv('finvenv\data\kenyan_professionals_expenditures (1).csv')

df.head()

expenditure_columns =['housing', 'food', 'transport', 'bills', 'clothing', 'personal_needs', 'debt_repayment', 'family_needs', 'health_insurance', 'entertainment_leisure']
df['total_expenditure'] = df[expenditure_columns].sum(axis=1)

df.head()

df.isnull().sum()

df= pd.get_dummies(df, columns=['gender', 'profession'], drop_first=True)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

X = df.drop(['id', 'total_expenditure'], axis=1)
X_scaled = scaler.fit_transform(X)

X.head()

X = pd.DataFrame(X_scaled, columns=X.columns)

from sklearn.model_selection import train_test_split

# Split the data into training and test sets
X = df.drop(['id', 'total_expenditure'], axis=1)
y = df['total_expenditure']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

y.head()

from sklearn.ensemble import RandomForestRegressor

# Initialize the model
model = RandomForestRegressor(random_state=42)

# Train the model
model.fit(X_train, y_train)

# 6. Model Evaluation
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Make predictions on the test set

y_pred = model.predict(X_test)

# Calculate evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Random Forest Regressor:")
print(f"  MAE: {mae}")
print(f"  MSE: {mse}")
print(f"  R-squared: {r2}")

import numpy as np

import matplotlib.pyplot as plt
import numpy as np

# Assuming y_test are the actual values and y_pred are the predicted values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')  # y=x line
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs. Predicted Values')
plt.show()

residuals = y_test - y_pred

plt.figure(figsize=(8, 6))
plt.scatter(y_pred, residuals, color='green')
plt.xlabel('Predicted')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.axhline(y=0, color='red', linestyle='--')  # Residuals around 0 line
plt.show()

# Assuming rf_model is your trained Random Forest Regression model
importances = model.feature_importances_
features = X.columns  # Replace with your feature names

plt.figure(figsize=(10, 8))
indices = np.argsort(importances)[::-1]
plt.bar(range(X.shape[1]), importances[indices], align='center')
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlabel('Features')
plt.ylabel('Importance')
plt.title('Feature Importances')
plt.show()



from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

# Assuming regressor is your trained Random Forest model
# Pick one tree from the forest, e.g., the first tree (index 0)
tree_to_plot = model.estimators_[0]

# Plot the decision tree
plt.figure(figsize=(20, 10))
plot_tree(tree_to_plot, feature_names=df.columns.tolist(), filled=True, rounded=True, fontsize=10)
plt.title("Decision Tree from Random Forest")
plt.show()



# Train your model (assuming rf_model is already trained)
# Save the model to a file in pkl format 
#The  command below shows where you'd like the model to be saved and using what name
with open('new\model.py/Arimis','wb') as f:# the with statement opens then closes the file to remove the ran out of input error
         
         pickle.dump(model,f)